// services/productService.ts - ESPECIALIZADO EN CREAR PRODUCTOS
import { authService } from "@/features/login/services/login-service"
import { ProductDetailResponse } from "../types/detail"
import {
  CreateProductResponse,
  CreateProductRequest,
  Category,
} from "../types/product-form"
import { getApiUrl } from "@/config/urls" // ‚Üê IMPORTAR CONFIGURACI√ìN DIN√ÅMICA

class ProductService {
  constructor() {
    // ‚úÖ SOLO LOG EN CLIENTE
    if (typeof window !== "undefined") {
      console.log(
        "üåê ProductService (Create) initialized with baseURL:",
        getApiUrl()
      )
    }
  }

  // ‚úÖ M√âTODO HELPER para headers con auth
  private getAuthHeaders(): HeadersInit {
    const token = authService.getToken()

    return {
      "Content-Type": "application/json",
      ...(token && { Authorization: `Bearer ${token}` }), // Solo agregar si hay token
    }
  }

  // ‚úÖ MEJORADO: Obtener detalle de producto
  async getProductDetail(id: string): Promise<ProductDetailResponse> {
    // ‚úÖ USAR URLs DIN√ÅMICAS
    const url = getApiUrl(`/products/${id}`)
    console.log("üîó Obteniendo detalle del producto:", url)

    try {
      const response = await fetch(url, {
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include", // ‚úÖ AGREGAR PARA COOKIES
      })

      console.log("üì° Product detail response status:", response.status)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        console.error(
          "‚ùå Error en getProductDetail:",
          response.status,
          errorData
        )

        if (response.status === 404) {
          throw new Error("Producto no encontrado.")
        }
        if (response.status === 403) {
          throw new Error("No tienes permisos para ver este producto.")
        }
        if (response.status >= 500) {
          throw new Error("Error del servidor. Intenta de nuevo m√°s tarde.")
        }

        throw new Error(
          errorData.message ||
            `Error ${response.status}: ${response.statusText}`
        )
      }

      const data = await response.json()
      console.log("‚úÖ Detalle del producto obtenido:", data.id)
      return data
    } catch (error) {
      console.error("‚ùå Get product detail error:", error)
      throw error
    }
  }

  // ‚úÖ MEJORADO: Crear producto con validaciones robustas
  async createProduct(
    productData: CreateProductRequest
  ): Promise<CreateProductResponse> {
    console.log("üöÄ INICIO createProduct")

    // ‚úÖ USAR URLs DIN√ÅMICAS
    const url = getApiUrl("/products")
    console.log("üîó URL:", url)
    console.log("üîç Datos originales:", JSON.stringify(productData, null, 2))

    // ‚úÖ VALIDACIONES PREVIAS
    if (!productData.name || productData.name.trim().length === 0) {
      throw new Error("El nombre del producto es requerido.")
    }

    if (!productData.categoryId) {
      throw new Error("La categor√≠a es requerida.")
    }

    // ‚úÖ NORMALIZAR PRECIO (convertir comas a puntos)
    const normalizedPrice = productData.price.toString().replace(",", ".")
    const price = parseFloat(normalizedPrice)

    console.log("üîç Precio original:", productData.price)
    console.log("üîç Precio normalizado:", normalizedPrice)
    console.log("üîç Precio convertido:", price)

    // Validar que el precio sea v√°lido
    if (isNaN(price) || price <= 0) {
      throw new Error("Precio inv√°lido. Debe ser un n√∫mero mayor a 0.")
    }

    // Validar stock
    const stock = parseInt(productData.stock.toString())
    if (isNaN(stock) || stock < 0) {
      throw new Error("El stock debe ser un n√∫mero mayor o igual a 0.")
    }

    // ‚úÖ PROBAR DIFERENTES FORMATOS DE PRECIO
    if (typeof window !== "undefined") {
      console.log("üß™ Testing different price formats...")

      const priceTests = {
        original: price,
        string: price.toFixed(2),
        stringWithoutDecimals: price.toFixed(0),
        number: Number(price),
        numberFixed: Number(price.toFixed(2)),
        parseFloat: parseFloat(price.toFixed(2)),
      }

      console.log("üîç Price formats to test:", priceTests)
    }

    // ‚úÖ DATOS PREPARADOS CON VALIDACIONES
    const dataToSend = {
      name: productData.name.trim(),
      price: parseFloat(price.toFixed(2)), // ‚úÖ PARSEFLOAT DEL STRING
      stock: stock,
      imgUrl: productData.imgUrl || null,
      year: productData.year ? productData.year.toString() : null,
      brand: productData.brand || null,
      model: productData.model || null,
      engine: productData.engine || null,
      categoryId: productData.categoryId,
    }

    console.log("üöÄ Datos enviados:", JSON.stringify(dataToSend, null, 2))

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: this.getAuthHeaders(),
        credentials: "include",
        body: JSON.stringify(dataToSend),
      })

      console.log("üîç Response status:", response.status)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        console.error("‚ùå Error response:", errorData)

        // ‚úÖ MEJOR manejo de errores
        if (response.status === 401) {
          throw new Error("No est√°s autenticado. Por favor inicia sesi√≥n.")
        }
        if (response.status === 403) {
          throw new Error("No tienes permisos para crear productos.")
        }
        if (response.status === 400) {
          throw new Error(
            Array.isArray(errorData.message)
              ? errorData.message.join(", ")
              : errorData.message || "Datos de producto inv√°lidos."
          )
        }
        if (response.status === 409) {
          throw new Error(
            "Ya existe un producto con este nombre, modelo o SKU."
          )
        }
        if (response.status >= 500) {
          throw new Error("Error del servidor. Intenta de nuevo m√°s tarde.")
        }

        throw new Error(
          errorData.message ||
            `Error ${response.status}: ${response.statusText}`
        )
      }

      const result = await response.json()
      console.log("‚úÖ Producto creado exitosamente:", result)
      return result
    } catch (error) {
      console.error("‚ùå Create product error:", error)
      throw error
    }
  }

  // ‚úÖ MEJORADO: Obtener categor√≠as
  async getCategories(): Promise<Category[]> {
    // ‚úÖ USAR URLs DIN√ÅMICAS
    const url = getApiUrl("/categories")
    console.log("üîó Obteniendo categor√≠as:", url)

    try {
      const response = await fetch(url, {
        headers: this.getAuthHeaders(),
        credentials: "include",
      })

      console.log("üì° Categories response status:", response.status)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        console.error("‚ùå Error en getCategories:", response.status, errorData)

        if (response.status === 401) {
          throw new Error("No est√°s autenticado. Por favor inicia sesi√≥n.")
        }
        if (response.status === 403) {
          throw new Error("No tienes permisos para ver las categor√≠as.")
        }
        if (response.status >= 500) {
          throw new Error("Error del servidor. Intenta de nuevo m√°s tarde.")
        }

        throw new Error(
          errorData.message ||
            `Error ${response.status}: ${response.statusText}`
        )
      }

      const data = await response.json()
      console.log("‚úÖ Categor√≠as obtenidas:", data.length || 0)
      return data
    } catch (error) {
      console.error("‚ùå Get categories error:", error)
      throw error
    }
  }

  // ‚úÖ MEJORADO: Actualizar producto
  async updateProduct(
    id: string,
    productData: Partial<CreateProductRequest>
  ): Promise<CreateProductResponse> {
    // ‚úÖ USAR URLs DIN√ÅMICAS
    const url = getApiUrl(`/products/${id}`)
    console.log("üîó Actualizando producto:", url)

    // Normalizar precio si existe
    const dataToSend = { ...productData }

    if (productData.price !== undefined) {
      const normalizedPrice = productData.price.toString().replace(",", ".")
      const price = parseFloat(normalizedPrice)

      if (isNaN(price) || price <= 0) {
        throw new Error("Precio inv√°lido. Debe ser un n√∫mero mayor a 0.")
      }

      dataToSend.price = parseFloat(price.toFixed(2))
    }

    if (productData.stock !== undefined) {
      const stock = parseInt(productData.stock.toString())
      if (isNaN(stock) || stock < 0) {
        throw new Error("Stock inv√°lido. Debe ser un n√∫mero mayor o igual a 0.")
      }
      dataToSend.stock = stock
    }

    if (productData.name) {
      dataToSend.name = productData.name.trim()
      if (dataToSend.name.length === 0) {
        throw new Error("El nombre del producto no puede estar vac√≠o.")
      }
    }

    console.log(
      "üîÑ Datos de actualizaci√≥n:",
      JSON.stringify(dataToSend, null, 2)
    )

    try {
      const response = await fetch(url, {
        method: "PUT",
        headers: this.getAuthHeaders(),
        credentials: "include",
        body: JSON.stringify(dataToSend),
      })

      console.log("üì° Update response status:", response.status)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        console.error("‚ùå Error updating product:", errorData)

        if (response.status === 401) {
          throw new Error("No est√°s autenticado. Por favor inicia sesi√≥n.")
        }
        if (response.status === 403) {
          throw new Error("No tienes permisos para actualizar productos.")
        }
        if (response.status === 404) {
          throw new Error("Producto no encontrado.")
        }
        if (response.status === 400) {
          throw new Error(
            Array.isArray(errorData.message)
              ? errorData.message.join(", ")
              : errorData.message || "Datos de actualizaci√≥n inv√°lidos."
          )
        }
        if (response.status === 409) {
          throw new Error("Conflicto: Ya existe un producto con estos datos.")
        }

        throw new Error(
          errorData.message ||
            `Error ${response.status}: ${response.statusText}`
        )
      }

      const result = await response.json()
      console.log("‚úÖ Producto actualizado exitosamente:", result)
      return result
    } catch (error) {
      console.error("‚ùå Update product error:", error)
      throw error
    }
  }

  // ‚úÖ MEJORADO: Eliminar producto
  async deleteProduct(id: string): Promise<void> {
    // ‚úÖ USAR URLs DIN√ÅMICAS
    const url = getApiUrl(`/products/${id}`)
    console.log("üîó Eliminando producto:", url)

    try {
      const response = await fetch(url, {
        method: "DELETE",
        headers: this.getAuthHeaders(),
        credentials: "include",
      })

      console.log("üì° Delete response status:", response.status)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        console.error("‚ùå Error deleting product:", errorData)

        if (response.status === 401) {
          throw new Error("No est√°s autenticado. Por favor inicia sesi√≥n.")
        }
        if (response.status === 403) {
          throw new Error("No tienes permisos para eliminar productos.")
        }
        if (response.status === 404) {
          throw new Error("Producto no encontrado.")
        }
        if (response.status === 409) {
          throw new Error(
            errorData.message ||
              "No se puede eliminar un producto que tiene √≥rdenes asociadas."
          )
        }

        throw new Error(
          errorData.message ||
            `Error ${response.status}: ${response.statusText}`
        )
      }

      console.log("‚úÖ Producto eliminado exitosamente")
    } catch (error) {
      console.error("‚ùå Delete product error:", error)
      throw error
    }
  }

  // ‚úÖ BONUS: Validar datos de producto antes de enviar
  validateProductData(productData: CreateProductRequest): {
    isValid: boolean
    errors: string[]
  } {
    const errors: string[] = []

    // Validar nombre
    if (!productData.name || productData.name.trim().length === 0) {
      errors.push("El nombre del producto es requerido")
    } else if (productData.name.trim().length < 3) {
      errors.push("El nombre debe tener al menos 3 caracteres")
    }

    // Validar precio
    const price = parseFloat(productData.price.toString().replace(",", "."))
    if (isNaN(price) || price <= 0) {
      errors.push("El precio debe ser un n√∫mero mayor a 0")
    }

    // Validar stock
    const stock = parseInt(productData.stock.toString())
    if (isNaN(stock) || stock < 0) {
      errors.push("El stock debe ser un n√∫mero mayor o igual a 0")
    }

    // Validar categor√≠a
    if (!productData.categoryId) {
      errors.push("La categor√≠a es requerida")
    }

    // Validar a√±o si se proporciona
    if (productData.year) {
      const year = parseInt(productData.year.toString())
      const currentYear = new Date().getFullYear()
      if (isNaN(year) || year < 1900 || year > currentYear + 1) {
        errors.push(`El a√±o debe estar entre 1900 y ${currentYear + 1}`)
      }
    }

    return {
      isValid: errors.length === 0,
      errors,
    }
  }

  // ‚úÖ BONUS: Crear producto con validaci√≥n previa
  async createProductWithValidation(
    productData: CreateProductRequest
  ): Promise<CreateProductResponse> {
    // Validar datos antes de enviar
    const validation = this.validateProductData(productData)

    if (!validation.isValid) {
      throw new Error(`Datos inv√°lidos: ${validation.errors.join(", ")}`)
    }

    return this.createProduct(productData)
  }
}

export const productService = new ProductService()
